/*(二分)2个上中位数相比，若相等，则返回。判断数组是否为空，长度是否相等*/
按位与运算将两个运算分量的对应位按位遵照以下规则进行计算：
0 & 0 = 0, 0 & 1 = 0, 1 & 0 = 0, 1 & 1 = 1。
即同为 1 的位，结果为 1，否则结果为 0。

按位异或运算将两个运算分量的对应位按位遵照以下规则进行计算：
0 ^ 0 = 0, 0 ^ 1 = 1, 1 ^ 0 = 1, 1 ^ 1 = 0
即相应位的值相同的，结果为 0，不相同的结果为 1。*/
1  2  3  4  5  6
1' 2' 3' 4' 5' 6'

class Solution {
public:
    int getUpMedian(vector<int> arr1, vector<int> arr2) {
			if(arr1.empty()||arr2.empty()||arr1.size()!=arr2.size())
                return -1;
        
        return find(arr1,0,arr1.size()-1,arr2,0,arr2.size()-1);
    }
    int find(vector<int> arr1,int start1,int end1, vector<int> arr2,int start2,int end2)
    {
        if(start1==end1)
            return arr1[start1]>arr2[start2]?arr2[start2]:arr1[start1];
        int offset=(end1-start1+1+1)%2;
        int mid1=(start1+end1)/2;
        int mid2=(start2+end2)/2;
        if(arr1[mid1]>arr2[mid2])
            return find(arr1,start1,mid1,arr2,mid2+offset,end2);
        else if(arr1[mid1]<arr2[mid2])
            return find(arr1,mid1+offset,end1,arr2,start2,mid2);
        else
            return arr1[mid1];
    }
};